Node -> println 'IMPLEMENT ME!';
NumberNode -> println <value>;
IdentifierNode -> print 'IDENTIFIER ', no_indent println <name>;
IdentifierListNode -> println 'IDENTIFIER LIST:', indented visit_children;
ConstantNode -> println 'CONSTANT', indented visit child;
StringNode -> print 'STRING LITERAL: ', no_indent println <str>;
EnumeratedTypeNode -> println 'ENUMERATED TYPE:', indented visit identifiers;
PointerTypeNode -> print 'POINTER TYPE: ', no_indent visit type;
RecordTypeNode -> println 'RECORD TYPE', indented visit child;
SetTypeNode -> println 'SET OF', indented visit type;
FileTypeNode -> println 'FILE OF', indented visit type;
IndexTypeNode -> visit type;
IndexTypeListNode -> visit_children;
PackedTypeNode -> println 'PACKED TYPE:', indented visit type;
VariableSectionNode -> println 'VARIABLE DECLARATION SECTION', indented visit declarations;
TypeDefinitionNode -> print 'TYPE DEFINITION: ', no_indent visit name, indented visit type;
TypeSectionNode -> println 'TYPE DEFINITION SECTION', indented visit_children;
OperationNode -> println !'operators::operatorName[e -> op()]',
                 indented { 'for (auto it = e -> args.cbegin(); it != e -> args.cend(); ++it)
                                 travel(*it);' };
SignNode -> println !'(e -> sign() == ''+'' ? "PLUS SIGN" : "MINUS SIGN")',
            indented visit child;
SubrangeTypeNode -> println 'SUBRANGE TYPE:',
                    indented { println 'LOWER BOUND', indented visit lower_bound,
                               println 'UPPER BOUND', indented visit upper_bound };
VariableDeclNode -> println 'VARIABLE DECLARATION: ',
                    indented { visit id_list, println 'OF TYPE', indented visit type };
VariableDeclListNode -> visit_children;
ArrayTypeNode -> println 'ARRAY WITH BOUNDS', indented visit index_type_list,
                 println 'OF TYPE',           indented visit type;
DeclarationNode -> visit child;
DeclarationListNode -> visit_children;
ExpressionNode -> visit child;
ExpressionListNode -> println 'LIST OF EXPRESSIONS:', indented visit_children;
SetNode -> println 'SET: ', indented visit elements;
IndexedVariableNode -> println 'INDEXED VARIABLE:', 
                       indented { println 'ARRAY VARIABLE:', indented visit array_variable,
                                  println 'INDICES:',        indented visit indices };
ReferencedVariableNode -> println 'REFERENCED VARIABLE:', indented visit variable;
FieldDesignatorNode -> println 'RECORD FIELD VARIABLE:',
                       indented { println 'RECORD VARIABLE:', indented visit variable,
                                  print 'FIELD NAME: ', no_indent visit field };
FunctionDesignatorNode -> print 'PROCEDURE/FUNCTION CALL: ', no_indent visit function,
                          indented visit parameters;
AssignmentStatementNode -> println 'ASSIGNMENT:', indented { visit variable, visit expression };
StatementNode -> visit child;
StatementListNode -> println 'STATEMENT SEQUENCE:', indented visit_children;
CompoundStatementNode -> println 'COMPOUND STATEMENT:', indented visit child;
WhileStatementNode -> println 'WHILE STATEMENT:', 
                      indented { println 'LOOP CONDITION:', indented visit condition,
                                 println 'LOOP BODY:', indented visit body };
RepeatStatementNode -> println 'REPEAT STATEMENT:',
                       indented { println 'LOOP BODY:', indented visit body,
                                  println 'LOOP CONDITION:', indented visit condition };
ForStatementNode -> println 'FOR STATEMENT:',
                    indented { print 'LOOP VARIABLE: ', no_indent visit variable,
                               indented { print 'DIRECTION: ',
                                          'std::cout << ((e -> direction) > 0 ? "TO" : "DOWNTO");',
                                          'std::cout << "\n";',
                                          println 'INITIAL EXPRESSION:', 
                                          indented visit initial_expression,
                                          println 'FINAL EXPRESSION:',
                                          indented visit final_expression },
                               println 'LOOP BODY:', indented visit body };
IfThenNode -> println 'IF-THEN STATEMENT:',
              indented { println 'CONDITION:', indented visit condition,
                         println 'THEN:', indented visit body };
IfThenElseNode -> println 'IF-THEN-ELSE STATEMENT:',
                  indented { println 'CONDITION:', indented visit condition,
                             println 'THEN-BRANCH:', indented visit then_body,
                             println 'ELSE-BRANCH:', indented visit else_body };
VariableNode -> visit variable;
VariableListNode -> visit_children;
WithStatementNode -> println 'WITH STATEMENT:', 
                     indented { println 'RECORD VARIABLES:', indented visit record_variables,
                                println 'BODY:', indented visit body };
ConstantListNode -> println 'LIST OF CONSTANTS:', indented visit_children;
CaseLimbNode -> println 'CONSTANTS:', indented visit constants,
                println 'BODY:', indented visit body;
CaseLimbListNode -> visit_children;
CaseStatementNode -> println 'CASE STATEMENT:',
                     indented { println 'EXPRESSION:', indented visit expression,
                                println 'CASES:', indented visit limbs };
ConstDefinitionNode -> print 'CONSTANT DEFINITION: ', no_indent visit identifier,
                       indented visit constant;
ConstSectionNode -> println 'CONSTANT DEFINITION PART:', indented visit_children;
BoundSpecificationNode -> println 'BOUND SPECIFICATION:', 
                          indented { print 'LOWER BOUND: ', no_indent visit lower_bound,
                                     print 'UPPER BOUND: ', no_indent visit upper_bound,
                                     print 'OF TYPE: ', no_indent visit type };
BoundSpecificationListNode -> println 'BOUND SPECIFICATION LIST:', visit_children;                           
PCArraySchemaNode -> println 'PACKED ARRAY PARAMETER:',
                     indented { visit bounds, println 'OF TYPE:', indented visit type };
UCArraySchemaNode -> println 'ARRAY PARAMETER:',
                     indented { visit bounds, println 'OF TYPE:', indented visit type };
VariableParameterNode -> println 'VARIABLE PARAMETER:', 
                         indented { println 'PARAMETER NAME(S):', indented visit identifiers,
                                    println 'PARAMETER TYPE:', indented visit type };
ValueParameterNode -> println 'VALUE PARAMETER:', 
                      indented { println 'PARAMETER NAME(S):', indented visit identifiers,
                                 println 'PARAMETER TYPE:', indented visit type };
ProcedureHeadingNode -> println 'PROCEDURE HEADING:',
                        indented { print 'NAME: ', no_indent println <name>,
                                   println 'FORMAL PARAMETERS:', indented visit params };
ParameterNode -> visit child;
ParameterListNode -> visit_children;
FunctionHeadingNode -> println 'FUNCTION HEADING:',
                       indented { print 'NAME: ', no_indent println <name>,
                                  println 'FORMAL PARAMETERS:', indented visit params,
                                  print 'RETURN TYPE: ', no_indent visit return_type };
ProcedureNode -> println 'PROCEDURE DECLARATION:',
                 indented { indented visit heading,
                            println 'BODY:', indented visit body };
FunctionNode -> println 'FUNCTION DECLARATION:',
                indented { indented visit heading,
                           println 'BODY:', indented visit body };
ProcedureForwardDeclNode -> println 'PROCEDURE FORWARD DECLARATION:', indented visit heading;
FunctionForwardDeclNode -> println 'FUNCTION FORWARD DECLARATION:', indented visit heading;
BlockNode -> println 'DECLARATION PART:', indented visit declarations,
             println 'STATEMENT PART:', indented visit statements
